// For bnd
buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'biz.aQute.bnd:biz.aQute.bnd.gradle:4.1.0'
	}
}

plugins {
    id 'java'
    id 'maven-publish'
    id 'signing'
    //id 'jacoco'
    id 'pmd'
    id 'checkstyle'
}

apply plugin: 'biz.aQute.bnd.builder'

group = 'org.daisy.dotify'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
    main {	java { srcDir 'src' }	resources { srcDir 'src' } }
    test {	java { srcDir 'test' srcDir 'integrationtest'}	resources { srcDir 'test' srcDir 'integrationtest'} }
}

test {
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
	options.encoding = 'UTF-8'
}

def repoRevision = System.getenv("REPO_REVISION")!=null?System.getenv("REPO_REVISION"):repositoryRevision

javadoc {
	options {
		encoding = 'UTF-8'
		source = 8
		overview = 'src/javadoc-overview.html'
		links('https://docs.oracle.com/javase/8/docs/api/')
	}
}

repositories {
    mavenCentral()
    //mavenLocal()
    maven { url "https://oss.sonatype.org/content/groups/staging" }
    //maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
}

dependencies {
    compile 'org.osgi:osgi.core:6.0.0'
    compile 'org.osgi:osgi.annotation:6.0.1'

    compile 'org.liblouis:liblouis-java:5.0.0'
    compile 'org.liblouis:liblouis-java:5.0.0:resources'
    testImplementation group: "junit", name: "junit", version: "4.12"
    compile group: "com.googlecode.texhyphj", name: "texhyphj", version: "1.2"
    compile 'org.daisy.bindings:jhyphen:1.0.2'
    runtimeOnly 'com.fasterxml.woodstox:woodstox-core:5.1.0'

    testImplementation group: "junit", name: "junit", version: "4.12"
    testImplementation "org.mockito:mockito-core:3.3.3"

    compile 'net.sf.saxon:Saxon-HE:9.5.1-5'

    compileOnly 'org.osgi:org.osgi.service.component.annotations:1.3.0'
    testCompileOnly 'org.osgi:org.osgi.service.component.annotations:1.3.0'
}

ext.writeTestsOverviewFile = { folderPath, fileName ->
	def folder = file(folderPath)
	def f = new File(folder, fileName)
	f.write('<?xml version="1.0" encoding="UTF-8"?>\n')
	f.append('<?xml-stylesheet href="display.xslt" type="text/xsl" ?>\n')
	f.append('<tests>\n')
	FileTree list = fileTree(dir: folder)
	list.include '**/*-input.obfl'
	list.each {
		def relpath = it.path.substring(projectDir.path.length()+folderPath.length()+2)
		def exp = relpath.substring(0, relpath.length()-11) + '-expected.pef'
		if (new File(folder, exp).exists()) {
			f.append('<test input="'+relpath+'" expected="' + exp + '"/>'+'\n')
		}
	}
	f.append('</tests>')
	return f
}

javadoc.dependsOn('updateTestsOverviewFile')

task updateTestsOverviewFile() {
	doLast() {
		// There are more tests in this folder with another naming standard, but they
		// don't suit the presentational format and are more of integration tests.
		// Additional tests should be written based on these.
		def r = writeTestsOverviewFile('integrationtest/org/daisy/dotify/formatter/test/resource-files', 'tests-overview.xml')
		ant {
			xslt (
				basedir: "integrationtest",
				destdir: (new File("${buildDir}/docs/tests")),
				style: "build-resources/display.xslt",
				includes: "**/tests-overview.xml",
				filenameparameter: "filename"
			) {
				mapper (
					type: "package",
					from: "*.xml",
					to: "*.html"
				)
				xmlcatalog {
					dtd (
						publicId: "-//W3C//DTD XHTML 1.0 Strict//EN",
						location: "build-resources/xhtml10/xhtml1-strict.dtd"
					)
				}
				param (
					name: 'timestamp',
					expression: new Date().format("yyyy-MM-dd'T'HH:mmXXX")
				)
			}
		}
		r.delete()
	}
}

jar {
	manifest {
		attributes(
			'-sources': 'true',
			'-exportcontents': '${packages;VERSIONED}',
			'Automatic-Module-Name': "$moduleName",
			'Bundle-Name': "$bundleName",
			'Bundle-SymbolicName': "$bundleName",
			'Built-By': System.getProperty("user.name"),
			'Built-On': new Date().format('yyyy-MM-dd'),
			'Repository-Revision': "$repoRevision",
			'Repository-URL': "$repositoryURL",
			'Include-Resource': 'LICENSE, NOTICE'
		)
	}
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

signing {
	required { isReleaseVersion }
	sign publishing.publications
}

publishing {
	//Only upload if a git hash is supplied. On Travis only upload snapshots.
	//enabled = repoRevision.size()==40 && System.getenv("TRAVIS_BUILD_ID")!=null
	publications {
		maven(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			/*
			if (isReleaseVersion) {
				beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
			}*/
			pom {
				name = 'dotify.library'
				packaging = 'jar'
				description = 'Dotify Library'
				url = "$repositoryURL"
				scm {
					connection = "$repositorySCM"
					developerConnection = "$repositorySCM"
					url = "$repositoryURL"
				}
				licenses {
					license {
						name = 'LGPL'
						url = 'http://www.gnu.org/licenses/lgpl.html'
					}
				}
				developers {
                    developer {
                        id = 'joel'
                        name = 'Joel HÃ¥kansson'
                    }
                    developer {
                        id = 'bertfrees'
                        name = 'Bert Frees'
                    }
                    developer {
                        id = 'kalaspuffar'
                        name = 'Daniel Persson'
                    }
                    developer {
                        id = 'paulrambags'
                        name = 'Paul Rambags'
                    }
				}
			}
		}
	}
	repositories {
		maven {
			def stagingRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
			def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
			url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : stagingRepoUrl
			credentials {
				username = sonatypeUsername
				password = sonatypePassword
			}
		}
	}
}

checkstyle {
    toolVersion '7.8.1'
    configFile file("checkstyle.xml")
}
checkstyleMain {
    source = ['src']
}
checkstyleTest {
    source = ['test', 'integrationtest']
}

tasks.withType(Checkstyle) {
    exclude '**/resource-files/**'
}

checkstyleMain.dependsOn javadoc

pmd.ruleSets = [
        // New rule sets:
        //'category/java/bestpractices.xml',
        //'category/java/codestyle.xml',
        //'category/java/design.xml',
        //'category/java/documentation.xml',
        //'category/java/errorprone.xml',
        //->'category/java/multithreading.xml',
        //'category/java/performance.xml',
        'category/java/security.xml',

        // Old rule sets (use for now):
        'java-basic',
        'java-braces',
        //'java-clone',
        //'java-codesize',
        //'java-comments',
        //'java-controversial',
        //'java-coupling',
        //'java-design',
        //'java-empty',
        'java-finalizers',
        'java-imports',
        //'java-optimizations',
        //->'java-strictexception',
        //'java-strings',
        'java-typeresolution',
        //'java-unnecessary',
        'java-unusedcode'
]

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

<!-- DTBook DTD V1.1.0 2002-02-27 -->
<!-- file: dtbook110.dtd  (Note: Update version attribute on dtbook element
    when version changes.)-->
<!--dtbook110 Digital Talking Book XML Document Type Definition
    Implementing the ANSI/NISO Digital Talking Book V1.1.0 Document
    Tagging Requirements

    Harvey Bingham <hbingham@acm.org>
    George Kerscher <kerscher@montana.com>
    Michael Moodie <mmoo@loc.gov>
    David Pawson <dpawson@rnib.org.uk>

    Assisted by DAISY Consortium and NISO DTB Committee work teams.

    1. Purpose

    The Digital Talking Book Document Type Definition (DTD) provides
    the means to mark up the text of a document to permit support for
    the combination of professional narration and navigation into that
    narration. It also facilitates the output of a document's content in
    a variety of accessible formats. The markup tags in the book convey
    its content in structure, and contain some metadata about the book
    content and its structure.

    The Document Type Definition names and defines the allowable element
    types, their allowable content, and their attributes. Correct markup
    of the text of the book permits the textual material to be synchronized
    using SMIL [SMIL2.0] files with the professionally narrated version of
    that book. The synchronization can permit concurrent display of the
    text being narrated. The textual content can be searched in context to
    locate material desired for narration.

    More detailed documentation of this dtbook dtd [DTBOOKV110DTD] is
    available as an html document. See [DTBOOKV110DOC].

    1.1. Prior Related Work

    The DAISY (Digital Audio-based Information SYstem) Consortium
    contributed substantially to the development of this DTD.
    This application of XML is the next generation after several DAISY
    versions of 2.X specifications, see [DAISY202].

    The DAISY Statement of Principles for the Creation and Production
    of Accessible Books and Materials [DAISY-2-GUIDELINES] represents
    the minimum standard to be met by Libraries of the Blind and producers
    of alternative format materials.

    Its Navigation Control Center (NCC) provided for synchronizing
    document structure with narration.

    The NCC evolved into an XML application called the "Navigation Control
    File for XML applications" (NCX). Its content is derived from
    the markup of documents tagged using the dtbook DTD. Richer
    structuring capability is one of the objectives of that DTD. The
    Synchronized Multimedia Integration Language [SMIL2.0] is used
    to provide synchronized narrations and text. The NCX provides
    navigation using the identified elements of documents tagged to this DTD.

    The dtbook DTD includes many, but not all, of the element types found
    in both the [HTML401STRICT] and [XHTML11STRICT] strict DTDs. HTML
    authoring tools permit those additional element tags, and may ignore
    the additional tags that are dtbook-specific. The lowercase names
    from XHTML are used, rather than the uppercase names from HTML.

    1.2. Evolution from HTML and XHTML

    Dtbook110 has 79 element types. It shares 47 element types with the
    HTML4.0 Strict DTD [HTML401STRICT] (as adjusted to use the lower-case
    names consonant with the XHTML Strict DTD [XHTML11STRICT]). It omits
    30 element types from them, and has 32 unique element types.

    Endtag markup is sometimes optional in HTML. It is required for use with
    xhtml and dtbook. Any XML application [XML12] requires endtags, or their
    abbreviated form for empty elements, such as "<br />". The benefit of
    including endtags is that the tagged document has dependable structure
    that can be validated against the dtbook dtd.

    Some tools available for browsing HTML may be used with dtbook
    material, at the expense of their discarding or ignoring some specific
    tagging and attributes that are not part of HTML 4.0. A CSS-based
    stylesheet [CSS1] or [CSS2] that identifies the presentation expectations
    for the HTML and non-HTML tags, or a filter to map those tags onto
    suitable HTML tags can provide appropriate visual presentation.

    2. Document Tagging Content

    A Digital Talking Book document is an XML application. Therefore, it
    must begin with the XML processing instruction, followed by the DOCTYPE
    declaration.

    2.1. XML Processing Instruction

    The XML Processing Instruction identifies the version of XML, and the
    optional character set encoding for the document:

        <?xml version="1.0" encoding="UTF-8" ?>

    2.2. Character Set Encodings

    The character set in which the document is encoded is identified by
    one of a number of strings. All XML applications are expected to be able
    to recognize the UNICODE/ISO/IEC 10646 encodings "UTF-8" and "UTF-16"
    [ISO10646].

    Some alternative encodings to "UTF-8" (or "ISO-10646-UCS-2")
    or "UTF-16" (or "ISO-10646-UCS-4") may be used. These include
    "ISO-8859-1", "ISO-8859-2", ... "ISO-8859-9" for parts of ISO 8859.
    See [ISO8859]. Note that US-ASCII (i.e. encoding all characters over
    decimal 127, e.g. from 128 to 255, as &#nnn;) is conformant with UTF-8
    (and ISO-8859-1, HTTP's default header encoding.)

    Also, the values "ISO-2022-JP", "Shift_JIS", or "EUC-JP" can be used
    for various Japanese encoded forms of JIS X-0208-1997. See [JIS].

    The Unicode characters may be represented as their code points,
    using the form &#hHHHH; where HHHH is a hexadecimal value formed
    from the digits 0-9 and letters A-F. Any initial H with value "0"
    may be elided.

    2.3. DOCTYPE Declaration

    The document type declaration, the DOCTYPE, follows. It has several forms.
    The simpler form assumes that the proper version of the dtbook DTD
    is in the same directory as the dtbook file itself.

        <!DOCTYPE dtbook SYSTEM
            "dtbook110.dtd">

    A more general form provides the PUBLIC URI from which the SYSTEM
    filename can be substituted, should that system copy be missing:

        <!DOCTYPE dtbook PUBLIC
            "http://www.loc.gov/nls/z3986/v100/dtbook110.dtd"
            "dtbook110.dtd">

    That assumes the URI can be reached, which may not be true for
    portable dtbook players.

    The still more general form recommended for xml applications [XML12] is:

        <!DOCTYPE dtbook PUBLIC
            "-//NISO//DTD dtbook v1.1.0//EN"
            "dtbook110.dtd">

    where the Formal Public Identifier (FPI) on the second line is converted
    to the URI where it may be publicly found:

        http://www.loc.gov/nls/z3986/v100/dtbook110.dtd

    The [OASIS-TR9401] Entity Management Catalog provides an indirect
    means to provide that mapping from FPI to the dtd.

    That catalog is more generally useful to provide the mapping from
    any external entity names (such as modules) to URIs where they may
    be found.

    Note that the reference above is to a particular version of the DTD,
    distinguished by the "v110".

    2.4. Digital Talking Book File MIME Type

    A Digital Talking Book document is tagged to the dtbook XML
    application. Its MIME media-type is "text/xml". The tagged book
    filename should have suffix ".xml". See [RFC2045].

    3. Modular Extension to the DTD

    The dtbook DTD has two parameter entities defined that provide means
    to allow an individual book to modularly extend the content models
    for its block and inline parameter entities:

        <!ENTITY % externalblock "">
        <!ENTITY % externalinline "">

    These parameter entities appear in corresponding block and inline
    content models. With this "" content they have no effect on books
    tagged to the dtbook DTD. In a book that needs a modular extension,
    values are given by redefinition in the internal subset of that book.
    This extends the dtbook DTD without having to change it.

    A book can augment the dtbook DTD by including other declarations
    or parameter entity references in the internal subset of declarations.
    The internal subset may occur in square brackets following the
    ExternalID and before the concluding ">" of the initial DOCTYPE
    declaration that identifies the dtbook DTD.

    Those additional markup declarations in the internal subset
    take preference over any in the dtbook DTD itself. The effective
    DTD is thereby augmented by the parameter entity values and any other
    declarations of the book's internal subset. When a given parameter
    entity declaration appears more than once in the external modules and
    the dtbook DTD, the first occurrence of that declaration is the one
    that takes effect, with modules in the internal subset being processed
    in order, before the DTD itself.

    For example:

        <!DOCTYPE dtbook SYSTEM
        "dtbook.dtd"
        [
            <!ENTITY % dramaModule SYSTEM "drama.dtd">
            %dramaModule;
            <!ENTITY % externalblock "| drama">
            <!ENTITY % externalinline "| stagedir">
        ]>

    The "%dramaModule;" invocation causes all declarations made within
    dramaModule to become the initial part of the dtbook DTD. Within the
    book, the empty entity declarations for both % externalblock and for
    % externalinline are replaced by these new definitions. Thus the
    block element drama can appear wherever block elements may occur in
    dtbook. Similarly any actual content needed for %externalinline;
    (" | stagedir" is shown above) can appear in that extension to wherever
    %inline; appears in the DTD.

    More than one module may be needed and included in a book, for example
    both poem and drama can appear in the internal subset of the book.
    For example, the internal subset of the book could contain:

        <!DOCTYPE dtbook SYSTEM
        "dtbook.dtd"
        [
            <!ENTITY % poemModule SYSTEM "poem.dtd">
            %poemModule;
            <!ENTITY % dramaModule SYSTEM "drama.dtd">
            %dramaModule;
            <!ENTITY % externalblock "| poem | stanza | verse | drama">
            <!ENTITY % externalinline "| stagedir">
        ]>

    Such external modules need to include the definitions of any parameter
    entities that are used in the modules since their definitions are needed
    before they can be expanded in their references. They cannot depend
    on parameter entities in the SystemLiteral or PubidLiteral.

    Note that arbitrary external modules from other sources may not have
    all the needed attributes. XML allows augmentation of ATTLISTs in the
    internal subset. Additional attribute names can be added to an
    associated element type. Any redefinitions of a particular named
    attribute resulting from presence in the internal subset have
    precedence.

    Also note that element name collisions may be possible, with names
    in those modules and associated content models overriding those in
    dtbook. For modules under control of dtbook design, such collisions
    can be avoided. A more general solution uses namespace prefixes to
    element and attribute names to clearly indicate the module source.

    Following the document type declaration, the fully marked-up document
    appears, including tags from the external modules found in the internal
    subset. Declarations in the internal subset or in external entity
    references (such as %dramaModule;) referenced therein take precedence
    over like-named ones from the external entity containing the base DTD
    (that is, dtbook110.dtd). Thus the declarations from the module
    containing the drama and poem tags are included along with the tags
    in the base DTD (that is dtbook110.dtd) that are not duplicated or
    redefined in the drama module. So if a <p> tag is defined in the drama
    module, its definition overrides that of the <p> tag in dtbook. There
    is an exception: an ATTLIST for elementname that adds attributes from
    the internal subset augments the ATTLIST attributes with different
    attribute names in the ATTLIST of the same elementname in the
    dtbook110.dtd.

    Note that tools and players processing any extended markup that affects
    navigation structure will need to know of those modular extensions.

    The form above for augmenting the dtbook dtd through the document's
    internal subset does not require the XML namespace mechanism, with
    its namespace-specific prefix on element and attribute names to
    disambiguate any potential name collisions. However, use of XML
    namespaces [XML-NAMES] is not precluded.

    4. References

    These references are informative. The bracketed names here are targets for
    indirect reference from the corresponding bracketed names in other parts
    of this document or in descriptions within this section.

    [CSS1] Cascading Style Sheets, Level 1. Rec-CSS1-1999011 Revised 11 Jan 1999

        http://www.w3.org/TR/REC-CSS1

    [CSS2] Cascading Style Sheets, Level 2 CSS2 Specification REC-CSS2-19980512

        http://www.w3.org/TR/REC-CSS2

    [DAISY202] The DAISY 2.02 Specification for the DAISY Digital Talking
    Book (DTB) format, which enables navigation within a sequential
    and hierarchical structure consisting of (marked-up) text synchronized
    with audio.

        http://www.daisy.org/dtbook/spec/2/final/d202/daisy_202.html

    [DAISY-2-GUIDELINES] The DAISY 2.02 Specification for
    the Creation and Production of Accessible Books and Materials,
    Version 0.99 1999-09-23 represents minimum standard to be met by
    Libraries for the Blind and producers of alternative format materials:

        http://www.daisy.org/dtbook/guidelines/draft/principles.htm

    [DTBOOKV110DTD] The dtbook DTD v1.1.0 (this DTD) is available at:

        http://www.loc.gov/nls/z3986/v100/dtbook110.dtd

    Note that some browsers do not permit downloading a file with suffix dtd.

    [DTBOOKV110DOC] Digital Talking Book Expanded Document Type Definition
    Documentation for Version V110 of this DTD is available as an
    HTML 4.0 document:

        http://www.loc.gov/nls/z3986/v100/dtbook110doc.htm

    Should revisions occur, a new directory with node named "vxxx" (rather
    than v110) that indicates the revision level will contain the revisions.
    Any prior specific version of the dtbook dtd and its documentation will
    persist.

    [DTBOOK3] The last public beta version was dtbook3-07.dtd (2001-01-31).

        http://www.loc.gov/nls/z3986/background/dtbk3_old_dtds/dtbk3-07.dtd

    and its expanded documentation:

        http://www.loc.gov/nls/z3986/background/dtbk3_old_dtds/dtbk3-07doc.htm

    Those and prior versions are available at:

        http://www.loc.gov/nls/z3986/background/dtbk3_old_dtds/index.html

    The history of changes prior to this version, including those
    in internal drafts through dtbk3-12.dtd and before is in:

        http://www.loc.gov/nls/z3986/background/dtbk3-dtd-changes.txt

    In that directory also are the old dtdbk3 dtds, some of which have
    been used for test markup,  and their documentation. See its
    index.html for the list. (Caution: some browsers may not
    permit downloading DTDs.)

        http://www.loc.gov/nls/z3986/background/index.html

    [HTML401STRICT] "HTML 4.0 Strict DTD," 1999-12-24, Dave Raggett,
    Arnaud Le hors, and Ian Jacobs. Dtbook110 was originally based on
    the HTML 4.0 Strict DTD with design adaptation for dtbook110.
    A principal adaptation is to use lower-case names for element types
    and attribute names. For expanded discussion, see [HTML401].

        http://www.w3.org/TR/1999/REC-html401-19991224/strict.dtd

    [HTML401] "HTML 4.01 Specification" W3C Recommendation 24 December 1999
    Documentation of the element types that come from the HTML 4.0 Strict
    DTD [HTML401STRICT] is available at:

        http://www.w3.org/TR/1999/REC-html401-19991224/

    Dtbook110 is partially harmonized with the [XHTML11STRICT] DTD.
    The XHTML camelCase parameter entity names are retained, and comments
    and references following those parameter entities explain them. The
    lower-case element and attribute names are used. The simplified table
    content model of just table rows is included.

    [ISO10646] "Information Technology - Universal Multiple-Octet Coded
    Character Set (UCS) - Part 1: Architecture and Basic Multilingual
    Plane", ISO/IEC 10646-1:1993. The current specification also takes
    into consideration the first five amendments to ISO/IEC 10646-1:1993.

    [ISO8859] "Information Processing - 8-bit single-byte coded graphic
    character sets - Part 1: Latin alphabet No. 1," ISO 8859-1:1987.
    Other suffixes "-2 through -9" correspond to other character sets
    in the family.

    [JIS] "JIS Character Sets" describes the history of JIS, and the
    several character sets for KANJI, KANA and other characters.

        http://www.io.com/~kazushi/encoding/jis.html

    [ANSINISOZ39-86-2002] Specifications for the Digital Talking Book.

        http://www.niso.org

    [NLS-Z3986] Development of ANSI/NISO Z39.86-2002
    Contains links to the DTDs developed for Z39.86-2002,
    Specifications for the Digital Talking Book

        http://www.loc.gov/nls/z3986/v100/index.html

    [OASIS-TR9401] Entity Management, OASIS Technical Resolution 9401:1997
    (Amendment 2 to TR 9401). Paul Grosso, 1997 September 10.

        http://www.oasis-open.org/specs/tr9401.html

    [RFC1556] "Handling of Bi-directional Texts in MIME," H. Nussbacher,
    December 1993.

        http://www.cis.ohio-state.edu/cgi-bin/rfc/rfc1556.html

    [RFC1766] "Tags for the Identification of Languages",
    H. Alvestrand, March 1995.

        http://www.cis.ohio-state.edu/cgi-bin/rfc/rfc1766.html

    [RFC1942] "HTML Tables", D. Raggett, May 1996

        http://www.ietf.org/rfc/rfc1942.txt

    Contains detailed descriptions of table elements and their
    inheritance of attribute values. Adjustment for XML application is
    required: end-tags are necessary, not optional, attribute values
    must be quoted.

    [RFC2045] "Multipurpose Internet Mail Extensions (MIME) Part One:
    Format of Internet Message Bodies", N. Freed and N. Borenstein,
    November 1996. Note that this RFC obsoletes RFC1521, RFC1522, and RFC1590.
    The %ContentType; and %ContentTypes; media types and the
    %Charset; and %Charsets; character encoding values are from [RFC2045].

        http://www.cis.ohio-state.edu/cgi-bin/rfc/rfc2045.html

    [RFC2046] "Multipurpose Internet Mail Extensions (MIME) Part Two:
    Media Types," N. Freed, November 1996. Source for %ContentType; and
    %ContentTypes; permitted values:

        http://www.cis.ohio-state.edu/cgi-bin/rfc/rfc2046.html

    [RFC2396] "Uniform Resource Identifiers (URI): Generic Syntax,"
    T. Berners-Lee, R. Fielding, L. Masinter, August 1998. Note that this RFC
    revises and replaces the generic definitions in RFC 1738 and RFC 1808.

        http://www.cis.ohio-state.edu/cgi-bin/rfc/rfc2396.html

    [SMIL2.0] The Synchronized Multimedia Integration Language SMIL 2.0
    W3C Recommendation 07 August 2001 is available at:

        http://www.w3.org/TR/2001/REC-smil20-20010807/smil20.html

    [XHTML11] "XHTML (tm) 1.0: The Extensible HyperText Markup Language,"
    W3C Recommendation 26 January 2000, A reformulation of HTML4 in XML 1.0
    includes case-sensitive names, lower-case for elements and their
    attributes (but not parameter entity names) and in some cases
    equivalent content models that do not require SGML inclusions
    and exclusion exceptions (as occurred in the HTML4.0 strict
    DTD [HTML401STRICT]) is available at:

        http://www.w3.org/TR/xhtml/

    [XML-NAMES] "Namespaces in XML" World Wide Web Consortium
    14-January-1999, REC-xml-names-19990114.

        http://www.w3.org/TR/REC-xml-names/

    [XHTML11STRICT] Expanded documentation of the element types that come
    from the XHTML11 strict.dtd and its other DTDs is available within
    the zip file:

        http://www.w3.org/TR/xhtml1/DTD/xhtml1/xhtml1.zip

    Note: some browsers cannot download a dtd directly.

    [XML12] This dtbook110.dtd is an application of the Extensible Markup
    Language XML 1.0 (Second Edition) W3C Recommendation 6 October 2000.
    It is available at:

        http://www.w3.org/TR/REC-xml

    -->

<!-- change record:
        1998-10-08 original by Harvey Bingham
        1999-01-23 revision 3-01
        1999-06-25 revision 3-02
        1999-07-20 revision 3-03
        1999-09-16 revision 3-04
        1999-09-24 revision 3-05
        1999-11-05 revision 3-06
        2001-01-31 revision 3-07
        2001-03-08 revision 3-08
        2001-03-30 revision 3-09 basis for dtbook110.dtd
        2001-09-07 revision 3-10 version 1.0.0 first draft
        2001-09-21 revision 3-11 version 1.0.0 second draft
        2001-09-26 revision 3-12 version 1.0.0 third draft
        2001-09-30 dtbook100 version 1.0.0 initial public release
        2002-01-22 dtbook110 version 1.1.0

    The record of evolution of this dtd may be found in the archives.
    See [DTBOOK3].

        2001-12-20 revision 1.1.0 has syntactic changes, so
        increased version secondary revision as content models
        are extended compatibly and new capability is added.
        Added annoref to parameter entities where noteref occurs:
            %dtbookinline; %inlines; %inlinenopagenum;
            %inlinenoprodnote; %inlinenoanoprodnote;
        Made some additions to references, including JIS and HTML Tables,
            XML Namespaces, OASIS Catalog.
        Made editorial clarifications to many Use: and Attuse: comments.
        Added subsections.
        Removed xhtml parameter entities from xhtml not used here:
             %ContentTypes; %Charsets; %Datetime;
        For processing purposes, split dtd into part1.dtd and part2.dtd
        split processing into four pieces.

    DTD Changes for dtbook110.dtd   Harvey Bingham 2001-12-20

        Character entities amplified comments.
        Removed %Datetime; %ContentTypes; and %Charsets;
             not used herein.
        % Charsets removed as unused.
        % ContentTypes removed as unused.
        % Datetime removed as unused.
        % dtbookblock added imggroup.
        % dtbookblocknoimggroup added.
        % inlineinblock removed img.
        % block added img and imggroup.
        % blocknoimggroup added using %dtbookblocknoimggroup.
        % headmisc added comment
        % special added imggroup
        % specialnoa added imggroup
        % dtbookinline added annoref
        % inlines added annoref
        % inlinenopagenum added annoref
        % inlinenoprodnote added annoref
        % flow changed %block; to %blocknoimggroup;
        % flownopagenum changed %block; to %blocknoimggroup;
        img Use: changed idref to imgref
        % Trules added default meaning from xhtml strict dtd.
        % cellhalign clarified interitance.
        % cellvalign clarified interitance.
        table updated model to xhtml strict dtd, adding
            simple table of just rows (tr). Added attribute inheritance
            information from RFC1942.
        caption added imgref extension for dtbook comment.
        thead updated Use to xhtml strict dtd.
        tfoot updated Use to xhtml strict dtd.
        tbody updated Use to xhtml strict dtd.
        colgroup updated Attuse to xhtml strict dtd.

   	Michael Moodie: 2002-02-14
   	
   	% block replaced %dtbookblock with %dtbookblocknoimggroup
   	to eliminate duplication of imggroup in content model.
   	level updated content model to include doctitle and docauthor
   	to allow them to be contained in a level marking the cover
   	or title page of a document.
   	level1 updated content model to include doctitle and docauthor
   	to allow them to be contained in a level1 marking the cover
   	or title page of a document.
   	div updated content model to include doctitle and docauthor
   	to allow them to be contained in a div marking the cover
   	or title page of a document.
   	
   	Michael Moodie: 2002-02-19
   	
   	level, level1-level6, div: Changed occurrence indicator on
   	content model from * to +.
   	
   	Michael Moodie: 2002-02-27
   	
   	Grammatical changes suggested by editor.
   	
    -->

<!-- Comment Classification Conventions

           Some comments start with a pattern followed by a colon:

               Use: element type and its use.

               Attuse: attribute use for associated element type.

               HB: date object comment on change by Harvey Bingham.

               MM: date object comment on change by Michael Moodie.

           Other comments without such a pattern are dividing lines,
           details about the DTD structure, or about dtbook objects.
    -->

<!--========================= Character Entities ==========================-->

<!--HB: 2001-12-20 Character entities amplified comments. -->

<!-- Character entities for interoperability.
        The five following characters may have special markup meaning,
        so are expressed as character entities in text. They can be
        recognized since they are preceded by "&" and followed by ";".
        The notation below, #xHHHH (or #xHH) where H is a hexadecimal-number
        (formed from 0-9, A-F), indicates the character code position
        in Unicode/ISO-10646 [ISO10646]. Note that the "<" and "&"
        characters in the declarations of "lt" and "amp" are doubly escaped
        to meet the requirement that entity replacement be well-formed.
        As these entities occur in the first plane of Unicode, with encodings
        the same as ASCII, the "00" prefix can be implied, so omitted.
    -->

<!ENTITY lt   "&#x0026;#x003C;" >
    <!-- "&#38;#60;"  < Less than, normally starts a tag. -->

<!ENTITY gt   "&#x003E;" >
    <!-- "&#62;"      > Greater than, normally ends a tag. -->

<!ENTITY amp  "&#x0026;#x0026;" >
    <!-- "&#38;#38;"  & Ampersand, normally begins a character entity
         reference. -->

<!ENTITY apos "&#x0027;" >
    <!-- "&#39;"      ' Neutral Quote, Apostrophe, if needed within an
         attribute string so quoted. -->

<!ENTITY quot "&#x0022;" >
    <!-- "&#34;"      " Quotation mark, if needed within an attribute string
         so quoted. -->

<!-- Three larger character sets included in HTML 4.0 are omitted here:
        HTMLlat1.ent, HTMLsymbol.ent, and HTMLspecial.ent.
        Unicode [ISO10646] is available to XML applications, so these
        characters are available. The initial processing instruction that
        identifies dtbook as an XML application should use a more inclusive
        encoding, as described at the start of section 2.
    -->

<!--=================== Imported Parameter Entity Names ===================-->

<!-- Many parameter entities come from the [XHTML11STRICT] strict DTD.-->

<!--HB: 2001-12-20 Removed %Datetime; %ContentTypes; and %Charsets;
         not used herein.-->

<!ENTITY % Character "CDATA" >
    <!-- a single character from [ISO10646]. -->

<!ENTITY % Charset "CDATA" >
    <!-- a character encoding, as per [RFC2045]. -->

<!--HB: 2001-12-20 % Charsets removed as unused. -->

<!ENTITY % ContentType "CDATA" >
    <!-- media type, as per [RFC2046]. -->

<!--HB: 2001-12-20 % ContentTypes removed as unused. -->

<!--HB: 2001-12-20 % Datetime removed as unused. -->

<!ENTITY % LanguageCode "NMTOKEN" >
    <!-- a language code, per [RFC1766]. -->

<!ENTITY % Number "CDATA" >
    <!-- one or more digits. -->

<!ENTITY % LinkTypes "CDATA" >
    <!-- space-separated list of link types. -->

<!ENTITY % MediaDesc "CDATA" >
    <!-- single or comma-separated list of media descriptors;
        possible values include BRAILLE, PRINT, PROJECTION, SPEECH, ALL,
        or the default SCREEN. -->

<!ENTITY % StyleSheet "CDATA" >
    <!-- style sheet data. -->

<!ENTITY % Text "CDATA" >
    <!-- used for titles etc. -->

<!ENTITY % URI "CDATA" >
    <!-- a Uniform Resource Identifier, see [RFC2396]. -->

<!--================== dtbook External Module Inclusion ===================-->

<!ENTITY % externalblock "" >
    <!-- placeholder for block element expansion from external modules;
        if changed, string in external subset begins " | blockelementname". -->

<!ENTITY % externalinline "" >
    <!-- placeholder for inline element expansion from external modules;
        if changed, string in external subset begins " | inlineelementname". -->

<!--====================== dtbook110 Content Models =======================-->

<!ENTITY % list "list" >
    <!-- list container for ordered or unordered lists (distinguished
        by attribute value, not element types ol or ul). -->

<!--HB: 2001-12-20 % dtbookblock added imggroup. -->

<!ENTITY % dtbookblock
    "author | notice | prodnote | sidebar | note | imggroup |
        annotation %externalblock;" >
    <!-- block elements unique to dtbook. -->

<!--HB: 2001-12-20 % dtbookblocknoimggroup added. -->

<!ENTITY % dtbookblocknoimggroup
    "author | notice | prodnote | sidebar | note |
        annotation %externalblock;" >
    <!-- block elements unique to dtbook without imggroup. -->

<!--HB: 2001-12-20 % inlineinblock removed img. -->

<!ENTITY % inlineinblock
    "a | cite | caption | samp | kbd | pagenum" >
    <!-- inlines that may alternatively be in block elements. -->

<!--HB: 2001-12-20 % block added img and imggroup. -->

<!--MM: 2002-02-14 replaced %dtbookblock with %dtbookblocknoimggroup in
     % block to eliminate duplication of imggroup in content model. -->

<!ENTITY % block
    "p | %list; | dl | div | blockquote | hr | img | imggroup |
         table | address | line | %dtbookblocknoimggroup;" >
    <!-- block elements from [HTML401STRICT] dtd augmented by dtbook-unique
        elements (%list; differs.). -->

<!--HB: 2001-12-20 % blocknoimggroup added using %dtbookblocknoimggroup. -->

<!ENTITY % blocknoimggroup
    "p | %list; | dl | div | blockquote | hr |
         table | address | line | %dtbookblocknoimggroup;" >
    <!-- block elements from [HTML401STRICT] dtd augmented by dtbook-unique
        elements. -->

<!--===================== Character mnemonic entities =====================-->

<!-- Omitted as XML uses Unicode, so doesn't need them. May need
        character entities if the encoding is more restrictive. -->

<!--========================= Generic Attributes ==========================-->

<!ENTITY % coreattrs
    "id          ID             #IMPLIED
     class       CDATA          #IMPLIED
     style       %StyleSheet;   #IMPLIED
     title       %Text;         #IMPLIED" >
    <!-- coreattrs are attributes permissible for most elements

        id       document-wide unique id
        class    space separated list of classes used for rendering
        style    associated style info
        title    advisory title/amplification
    -->

<!ENTITY % i18n
    "lang        %LanguageCode; #IMPLIED
     xml:lang    %LanguageCode; #IMPLIED
     dir         (ltr|rtl)      #IMPLIED" >
    <!-- i18n internationalization attributes

        lang        language code (backwards compatible)

        xml:lang    language code (as per XML 1.0 spec)

        dir         direction for weak/neutral text
                    ltr=left to right
                    rtl=right to left

    xhtml recommendation: use both lang and xml:lang, with same value,
    such as "en-US", on the major containing block, to provide source for
    the #IMPLIED values of its descendent elements. See [RFC1556].
    should the values differ, the xml:lang takes precedence.
    See [RFC1556] for handling bi-directional text in MIME.
    -->

<!ENTITY % showin
    "showin (xxx|xxp|xlx|xlp|bxx|bxp|blx|blp) #IMPLIED" >
    <!--showin attribute applies for text elements to permit identification
        of the kinds of display appropriate for the element, so presentation
        choice by the reader among alternative readings can be provided, when
        appropriate. Values of showin are coded with three letters in order:
        "b"=Braille, "l"=Largeprint, and "p"=Print; or "x"=inappropriate:

            Value  Braille  Largeprint Print   Interpretation

            "xxx"                              hide
            "xxp"                      p       print only
            "xlx"           l                  largeprint only
            "xlp"           l          p       largeprint and print
            "bxx"   b                          braille only
            "bxp"   b                  p       braille and print
            "blx"   b       l                  braille and largeprint
            "blp"   b       l          p       braille, largeprint, and print

        There is no default value; this attribute value is implied
        from the most immediate ancestor that specifies a value.
        The usual default for showin is 'blp'. If only one showin
        value is needed it should be included with <book>.

        Different content for the same element (usually <prodnote>) meeting
        different needs is possible, with showin serving as a switch to
        differentiate among them. Both largeprint and print are appropriate
        for screen rendering as well as printing. Different corresponding
        styles may be appropriate.

        It is possible to include equivalent content from any major structure
        below <book> to provide the different content suitable for different
        media. These would be independent, sharing no direct content, possibly
        having common references to images, with different accompanying text
        descriptions.
    -->

<!ENTITY % attrs
    "%coreattrs;
     %i18n;
     smilref      CDATA       #IMPLIED
     %showin;" >
    <!-- %attrs; is part of most attribute lists. It includes

    %coreattrs; from which come the four #IMPLIED attributes:
        id, class, style, and title.

    %i18n; from which come the implied attributes: lang, xml:lang, and dir

    smilref is a pointer to a [SMIL2.0] file, normally to the time container
        (SMIL <par> or <seq>) containing the media object that references this
        element. However, in a text-only DTB consisting of a sequence of
        text media objects, <smilref> points to the media object that
        references this element. <smilref> allows resumption of SMIL
        presentation at the proper location after navigation via dtbook file.
        All <smilref> values are expected to be added to an augmented
        version of the <dtbook> during production.

    %showin; (See entity declaration.)
    -->

<!ENTITY % attrsrqd
    "id          ID             #REQUIRED
     class       CDATA          #IMPLIED
     style       %StyleSheet;   #IMPLIED
     title       %Text;         #IMPLIED
     smilref     CDATA          #IMPLIED
     %i18n;
     %showin; " >
    <!-- %attrsrqd; includes required id and implied class, style, and
        title.

    %i18n; from which come the implied attributes: lang, xml:lang, and dir

    smilref is a pointer to a [SMIL2.0] file, normally to the time container
        (SMIL <par> or <seq>) containing the media object that references this
        element. However, in a text-only DTB consisting of a sequence of
        text media objects, <smilref> points to the media object that
        references this element. <smilref> allows resumption of SMIL
        presentation at the proper location after navigation via dtbook file.
        All <smilref> values are expected to be added to an augmented
        version of the <dtbook> during production.

    %showin; (See entity declaration.)
    -->

<!--========================= Document Structure ==========================-->

<!ENTITY % dtbookcontent
    "head, book" >
    <!-- dtbookContent designates that each dtbook has a <head> of
        metainformation preceding the <book> content.
    -->

<!--Use: dtbook is the root element in the Digital Talking Book DTD.
    <dtbook> contains metadata in <head> and the contents itself
    in <book>.
    -->

<!ELEMENT dtbook (%dtbookcontent;) >

<!--Attuse: dtbook

    "version" is required, and contains the specific
    version of the dtd, so that the dtd version for any dtbook can
    be recognized.

    "%i18n;" internationalization attributes characterize the <book>.
    Those values may be adjusted for language changes within it.
    -->

<!ATTLIST dtbook
  version CDATA #FIXED '1.1.0'
  %i18n;
  >

<!--======================== Document Head Metadata =======================-->

<!--HB: 2001-12-20 % headmisc added comment -->

<!ENTITY % headmisc
    "style | meta | link" >
    <!-- optional head elements -->

<!--Use: head contains metainformation about the book but no
    actual content of the book itself, which is placed in <book>.
    This information is consonant with the <head> information
    in xhtml, see [XHTML11STRICT]. Other miscellaneous elements can
    occur before and after the required <title>. By convention
    <title> should occur first.
    -->

<!ELEMENT head ((%headmisc;)*, title, (%headmisc;)*) >

<!--Attuse: head

    "profile" gives one or more
    whitespace-separated profile URI targets that may provide
    additional information about the current document.
    -->

<!ATTLIST head
  %i18n;
  profile %URI; #IMPLIED
  >

<!--Use: title contains the title of the book but is used only as
    metainformation in <head>. Use <doctitle> within <book> for
    the actual book title, which will usually be the same.
    -->

<!ELEMENT title (#PCDATA) >

<!ATTLIST title
  %i18n;
  >

<!--Use: link is an empty element appearing in the <head> section
    of a document that establishes a connection between the current
    document and another document. The <link> element conveys
    relationship information (for example, "next" and "previous") that
    may be rendered by user agents in a variety of ways.
    -->

<!ELEMENT link EMPTY >

<!--Attuse: link

    Each attribute use indicated by a parameter entity is
    defined in the comment following its definition.
    -->

<!ATTLIST link
  %attrs;
  charset %Charset; #IMPLIED
  href %URI; #IMPLIED
  hreflang %LanguageCode; #IMPLIED
  type %ContentType; #IMPLIED
  rel %LinkTypes; #IMPLIED
  rev %LinkTypes; #IMPLIED
  media %MediaDesc; #IMPLIED
  >

<!--Use: meta indicates metadata about the book. It is an empty
    element that may appear repeatedly only in <head>.
    -->

<!ELEMENT meta EMPTY >

<!--Attuse: meta

    "http-equiv" connects the content attribute
    value to an http header field.

    "name" value identifies the specific kind of
    content value.

    "content" indicates the value for that "name",
    possibly constrained by the semantics for the individual names.

    "scheme" indicates a predetermined format for interpreting
    the content value, such as the Dublin Core.
    -->

<!ATTLIST meta
  %i18n;
  http-equiv NMTOKEN #IMPLIED
  name NMTOKEN #IMPLIED
  content CDATA #REQUIRED
  scheme CDATA #IMPLIED
  >

<!--Use: style provides the means to include styling information
    that applies to the book. It may appear only in <head>.
    It may include CDATA sections.
    -->

<!ELEMENT style (#PCDATA) >

<!--Attuse: style

    "type" indicates the MIME-Type [RFC2045].
    Type value should be 'text/css', rather than 'text/javascript'.

    "media" value indicates the media for stylesheet
    definition(s); if multiple, separated by commas.

    "title" can provide menu choice among alternative
    stylesheets.

    "xml:space" value='preserve' indicates that whitespace in
    the <style> content is preserved without need to include its
    value in each <style>. (xml:space='default' accepts system style
    adjustment, such as adding its own indenting.)
    -->

<!ATTLIST style
  %i18n;
  type %ContentType; #REQUIRED
  media %MediaDesc; #IMPLIED
  title %Text; #IMPLIED
  xml:space (default | preserve) 'preserve'
  >

<!--============================ Book Content =============================-->

<!--Use: book surrounds the actual content of the document, which
    is divided into <frontmatter>, <bodymatter>, and <rearmatter>.
    <head>, which contains metadata, precedes <book>.
    -->

<!ELEMENT book (frontmatter?, bodymatter?, rearmatter?) >

<!ATTLIST book
  %attrs;
  >

<!--======================== Book Major Structures ========================-->

<!--Use: frontmatter usually contains <doctitle> and <docauthor>, as
    well as preliminary material that is often enclosed in appropriate
    <level> or <level1>. Content may include copyright notice, foreword,
    acknowledgments, table of contents, etc. <frontmatter> serves as a
    guide to the content and nature of a <book>.
    -->

<!ELEMENT frontmatter (doctitle | docauthor | level | level1 | %block;)+ >

<!ATTLIST frontmatter
  %attrs;
  >

<!--Use: bodymatter consists of the text proper of a book, as contrasted
    with preliminary material <frontmatter> or supplementary information
    in <rearmatter>.
    -->

<!ELEMENT bodymatter (level | level1 | %block;)+ >

<!ATTLIST bodymatter
  %attrs;
  >

<!--Use: rearmatter contains supplementary material such as
    appendices, glossaries, bibliographies, and indices. It follows
    the <bodymatter> of the book.
    -->

<!ELEMENT rearmatter (level | level1 | %block;)+ >

<!ATTLIST rearmatter
  %attrs;
  >

<!--================== dtbook Recursive Structure level ===================-->

<!--MM: 2002-02-14 Added doctitle and docauthor to content model of level
    to allow them to be contained in a level marking the cover or title page of
    a document. -->

<!--MM: 2002-02-19 Changed occurrence indicator on content model of level
    from * to +. -->

<!--Use: level is an alternative tag for marking the major
    structures in a book. It may be used recursively, i.e., repeated
    indefinitely with each successive occurrence nesting within the
    previous. It may also be included in a subsequent higher level.
    Subordinate levels have greater depth. Contrast with the explicit
    <level1>...<level6> elements, which may not be intermixed with
    <level>.
    -->

<!ELEMENT level (levelhd | %block; | %inlineinblock; | level | doctitle | docauthor)+ >

<!--Attuse: level

    "class" identifies the actual name (e.g., part,
    chapter, section, subsection) of the structure it marks.

    "depth" indicates the nesting depth, starting at 1.
    -->

<!ATTLIST level
  %attrs;
  depth CDATA #IMPLIED
  >

<!--============ dtbook Hierarchic Structure level1 ... level6 ============-->

<!--MM: 2002-02-14 Added doctitle and docauthor to content model of level1
    to allow them to be contained in a level1 marking the cover or title
    page of a document. -->

<!--MM: 2002-02-19 Changed occurrence indicator on content model of level1
    from * to +. -->

<!--Use: level1 is the highest-level container of major divisions of
    a book. Used in <frontmatter>, <bodymatter>, and <rearmatter> to
    mark the largest divisions of the book (usually parts or chapters),
    inside which level2 subdivisions (often sections) may nest.
    The class attribute identifies the actual name (e.g., part, chapter)
    of the structure it marks. Contrast with <level>.
    -->

<!ELEMENT level1 (h1 | level2 | %block; | %inlineinblock; | doctitle | docauthor)+ >

<!ATTLIST level1
  %attrs;
  >

<!--MM: 2002-02-19 Changed occurrence indicator on content model of level2
    from * to +. -->

<!--Use: level2 contains subdivisions that nest within <level1>
    divisions. The class attribute identifies the actual name (e.g.,
    subpart, chapter, subsection) of the structure it marks.
    -->

<!ELEMENT level2 (h2 | level3 | %block; | %inlineinblock;)+ >

<!ATTLIST level2
  %attrs;
  >

<!--MM: 2002-02-19 Changed occurrence indicator on content model of level3
    from * to +. -->

<!--Use: level3 contains sub-subdivisions that nest within <level2>
    subdivisions (e.g., sub-subsections within subsections). The class
    attribute identifies the actual name (e.g., section, subpart,
    subsubsection) of the subordinate structure it marks.
    -->

<!ELEMENT level3 (h3 | level4 | %block; | %inlineinblock;)+ >

<!ATTLIST level3
  %attrs;
  >

<!--MM: 2002-02-19 Changed occurrence indicator on content model of level4
    from * to +. -->

<!--Use: level4 contains further subdivisions that nest within <level3>
    subdivisions. The class attribute identifies the actual name
    of the subordinate structure it marks.
    -->

<!ELEMENT level4 (h4 | level5 | %block; | %inlineinblock;)+ >

<!ATTLIST level4
  %attrs;
  >

<!--MM: 2002-02-19 Changed occurrence indicator on content model of level5
    from * to +. -->

<!--Use: level5 contains further subdivisions that nest within <level4>
    subdivisions. The class attribute identifies the actual name
    of the subordinate structure it marks.
    -->

<!ELEMENT level5 (h5 | level6 | %block; | %inlineinblock;)+ >

<!ATTLIST level5
  %attrs;
  >

<!--MM: 2002-02-19 Changed occurrence indicator on content model of level6
    from * to +. -->

<!--Use: level6 contains further subdivisions that nest within <level5>
    subdivisions. The class attribute identifies the actual name
    of the subordinate structure it marks.
    -->

<!ELEMENT level6 (h6 | %block; | %inlineinblock;)+ >

<!ATTLIST level6
  %attrs;
  >

<!--============================= Text Markup =============================-->

<!ENTITY % phrase
    "em | strong | dfn | code | samp | kbd | cite | abbr | acronym" >
    <!-- inline text elements -->

<!--HB: 2001-12-20 % special added imggroup -->

<!ENTITY % special
    "a | img | imggroup | br | q | sub | sup | span | bdo | linenum" >
    <!-- special inline text elements -->

<!--HB: 2001-12-20 % specialnoa added imggroup -->

<!ENTITY % specialnoa
    "img | imggroup | br | q | sub | sup | span | bdo | linenum" >
    <!-- specialnoa inline text elements for anchor <a> -->

<!--=========================== Inline Entities ===========================-->

<!--HB: 2001-12-20 % dtbookinline added annoref. -->

<!ENTITY % dtbookinline
     "sent | w | pagenum | prodnote | annoref | noteref %externalinline;" >
    <!-- dtbook added inline text elements -->

<!ENTITY % inline
    "#PCDATA | %phrase; | %special; | %dtbookinline;" >
    <!-- inline text elements -->

<!ENTITY % inlinenoa
    "#PCDATA | %phrase; | %specialnoa; %externalinline;" >
    <!-- inlinenoa excludes nested <a> -->

<!--HB: 2001-12-20 % inlines added annoref. -->

<!ENTITY % inlines
     "#PCDATA | %phrase; | %special; | pagenum | w | prodnote | annoref |
         noteref %externalinline;" >
    <!-- inlines excludes direct nesting of sentences <sent> -->

<!ENTITY % inlinew
     "#PCDATA | %phrase; | %special; %externalinline;" >
    <!-- inlinew for word <w> excludes any of the %dtbookinline; -->

<!--HB: 2001-12-20 % inlinenopagenum added annoref. -->

<!ENTITY % inlinenopagenum
     "#PCDATA | %phrase; | %special; |
          sent | w | annoref | noteref %externalinline;" >
    <!-- inlinenopagenum excludes direct <pagenum> in <table> <th> and <td> -->

<!--HB: 2001-12-20 % inlinenoprodnote added annoref. -->

<!ENTITY % inlinenoprodnote
     "#PCDATA | %phrase; | %special; |
          sent | w | pagenum | annoref | noteref %externalinline;" >
    <!-- inlinenoprodnote excludes direct <prodnote>, as they shouldn't nest -->


<!--=================== Flow (Block or Inline) Entities ===================-->

<!--HB: 2001-12-20 % flow changed %block; to %blocknoimggroup; -->

<!ENTITY % flow
    "%inlinenoprodnote; | %blocknoimggroup;" >
    <!-- flow elements add inlinenoprodnote to block -->

<!--HB: 2001-12-20 % flownopagenum changed %block; to %blocknoimggroup; -->

<!ENTITY % flownopagenum
    "%inlinenopagenum; | %blocknoimggroup;" >
    <!-- flownopagenum ideally excludes pagenum though can get in
        indirectly through elements of %blocknoimggroup; -->

<!--============ Br, Linenum, Address, and Div Content Models =============-->


<!--Use: br marks a forced line break.
    -->

<!ELEMENT br EMPTY >

<!--Attuse: br

    The %coreattrs; only appear, as there is no content
    to which the more general %attrs; apply.
    -->

<!ATTLIST br
  %coreattrs;
  >

<!--Use: linenum contains a line number, for example in legal text.
    -->

<!ELEMENT linenum (#PCDATA) >

<!ATTLIST linenum
  %attrs;
  >

<!--Use: address contains a location at which a person or agency
    may be contacted. By use of <line> to contain content of the
    individual lines, the class attribute can be used to identify
    the content of that <line>. For example, class values might include:
    name, address, region (state. province, etc.), country, location
    code (such as zipcode, provincial code), phone, fax, email, etc.
    -->

<!ELEMENT address (%inline; | line)* >

<!ATTLIST address
  %attrs;
  >
<!--MM: 2002-02-14 Added doctitle and docauthor to content model of div to
    allow them to be contained in a div marking the cover or title page of
    a document. -->

<!--MM: 2002-02-19 Changed occurrence indicator on content model of div
    from * to +. -->

<!--Use: div is a generic container for subdivisions of a book. The
    <level1> ... <level6> hierarchy, or the <level> tag used recursively,
    should mark the major hierarchical structures of a book, while <div>
    is used in less formal circumstances or when for production purposes
    it is desired that a structure should be treated differently.
    Compare with <span>, which is used in inline settings.
    -->

<!ELEMENT div (%block; | %inlineinblock; | doctitle | docauthor)+ >

<!--Attuse: div

    "level" may extend or augment explicit levels,
    to indicate nesting level, with values the positive integers, with
    '1' corresponding to <level1>, and value generally one larger than
    the enclosing level.

    "class" value can identify the
    actual name (e.g., part, chapter, letter) of the structure it marks.
    -->

<!ATTLIST div
  %attrs;
  level CDATA #IMPLIED
  >

<!--======= dtbook Block Elements Author, Notice, Prodnote, Sidebar =======-->

<!--Use: author identifies the writer of a work other than this one.
    Contrast with <docauthor>,  which identifies the author of this work.
    <author> typically occurs within <blockquote> or <cite>.
    -->

<!ELEMENT author (%inline;)* >

<!ATTLIST author
  %attrs;
  >

<!--Use: notice contains a warning, caution, or other type of admonition
    normally found in the margin of a book. In contrast with <sidebar>
    a <notice> must be presented at a specific location within the
    text. Its presentation is not optional.
    -->

<!ELEMENT notice (%inline;)* >

<!ATTLIST notice
  %attrs;
  >

<!--Use: prodnote contains language added to the alternative-format
    version by the producer; commonly used to:
    1) provide descriptions of one or more visual elements such
        as charts, graphs, etc.
    2) supply operating instructions
    3) describe differences between the print book and the audio
    version.
    -->

<!ELEMENT prodnote (%flow;)* >

<!--Attuse: prodnote

    "imgref" identifies the space-separated id value(s)
    on pertinent images <img>.

    "render" indicates that the content is
    'required or 'optional' for the user. If optional, some user
    preference may allow skipping over the content. But <prodnote
    render='required'> is essential content for the user. An
    audible cue could announce the presence of the <prodnote>.
    -->

<!ATTLIST prodnote
  %attrs;
  imgref IDREFS #IMPLIED
  render (required | optional) #IMPLIED
  >

<!--Use: sidebar contains information supplementary to the main
    text and/or narrative flow and is often boxed and printed apart
    from the main text block on a page. It may have a heading <hd>.
    -->

<!ELEMENT sidebar (%flow; | hd)* >

<!ATTLIST sidebar
  %attrs;
  >

<!--Use: note marks a footnote, endnote, etc. Any local reference to
<note id="yyy"> is by <noteref idref="#yyy">.
    -->

<!ELEMENT note (%block; | %inlineinblock;)+ >

<!ATTLIST note
  %attrsrqd;
  >

<!--Use: annotation is a comment on or explanation of a portion of
    a printed book. It differs from <note> in that an <annotation>
    is usually set in the margin or on a facing page, often with
    no explicit reference to it inserted in the text. Any local
    reference to <annotation id="xxx"> is by <annoref idref="#xxx">.
    -->

<!ELEMENT annotation (%block; | %inlineinblock;)+ >

<!ATTLIST annotation
  %attrsrqd;
  >

<!--Use: line marks a single logical line of text. Often used in
    conjunction with <linenum> in documents with numbered lines.
    -->

<!ELEMENT line (%inline;)* >

<!ATTLIST line
  %attrs;
  >

<!--========================= The Anchor Element ==========================-->

<!--Use: a contains an anchor, which is used to reference another
    location, within the same or another <dtbook>.
    -->

<!ELEMENT a (%inlinenoa;)* >

<!--Attuse: a

    "href" value may have three forms:

    1) '#idref', in the <dtbook>, to the element type having the
        referenced id value;

    2) 'uri', a uniform resource identifier to a resource, typically a
        document, see [RFC2396], possibly restricted to work with only
        the <dtbook> document content, as referenced content is
        expected to be available on the same media, and off-media
        references may not be available;

    3) 'uri#xxx', in the resource uri, the element with id='xxx'.

    Uses of the remaining attributes other than %attrs; are:

        "type" is advisory content MIME type of the target, see [RFC1556];

        "hreflang" is the language code of the href target, see [RFC1766];

        "rel" is a list of forward link type(s), the relationship(s)
            expressed by the href value to the target, space-separated
            if multiple;

        "rev" is a list of reverse link types, the relationship(s)
            to this location from the href target, space-separated
            if multiple;

        "accesskey"=accessibility key character shortcut;

        "tabindex"=tabbing order.
    -->

<!ATTLIST a
  %attrs;
  type %ContentType; #IMPLIED
  href %URI; #IMPLIED
  hreflang %LanguageCode; #IMPLIED
  rel %LinkTypes; #IMPLIED
  rev %LinkTypes; #IMPLIED
  accesskey %Character; #IMPLIED
  tabindex %Number; #IMPLIED
  >

<!--=========================== Inline Elements ===========================-->

<!--Use: em indicates emphasis. Usually <em> is rendered in italics.
Compare with <strong>.
    -->

<!ELEMENT em (%inline;)* >

<!ATTLIST em
  %attrs;
  >

<!--Use: strong marks stronger emphasis than <em>. Visually <strong> is
     usually rendered bold. -->

<!ELEMENT strong (%inline;)* >

<!ATTLIST strong
  %attrs;
  >

<!--Use: dfn marks the first occurrence of a word or term that is
    defined or explained there or elsewhere in <book>. Often
    <dfn> is rendered in italics, sometimes in parentheses.
    -->

<!ELEMENT dfn (%inline;)* >

<!ATTLIST dfn
  %attrs;
  >

<!--Use: kbd designates information that the reader is to input
    directly into a computer using the keyboard.
    -->

<!ELEMENT kbd (%inline;)* >

<!ATTLIST kbd
  %attrs;
  >

<!--Use: code designates a fragment of computer code.
    -->

<!ELEMENT code (%inline;)* >

<!--Attuse: code

    "xml:space" value='preserve' preserves
    whitespace therein (except that an XML parser strips leading
    and trailing whitespace before passing the internal content
    including its original whitespace to the application.) The value
    'default' leaves the whitespace handling to the application.
    -->

<!ATTLIST code
  %attrs;
  xml:space (default | preserve) 'preserve'
  >

<!--Use: samp contains a sample of work created by the author for
    use as an example or template. For example, a sample business
    letter, resume, computer program output, or form.
    -->

<!ELEMENT samp (%inline;)* >

<!--Attuse: samp

    "xml:space" value 'preserve' preserves
    whitespace therein (except that an XML parser strips leading
    and trailing whitespace before passing the internal content
    including its original whitespace to the application.) The value
    'default' leaves the whitespace handling to the application.
    -->

<!ATTLIST samp
  %attrs;
  xml:space (default | preserve) 'preserve'
  >

<!--Use: cite marks a reference (or citation) to another document.
    -->

<!ELEMENT cite (%inline;)* >

<!ATTLIST cite
  %attrs;
  >

<!--Use: abbr designates an abbreviation, a shortened form of a
    word. For examples: Mr., approx., lbs., rec'd.
    Contrast with <acronym>.
    -->

<!ELEMENT abbr (%inline;)* >

<!--Attuse: abbr

    "title" value may expand that abbreviation.
    -->

<!ATTLIST abbr
  %attrs;
  >

<!--Use: acronym marks a word formed from key letters (usually
    initials) of a group of words. For examples: UNESCO, NATO, XML, US.
    Contrast with <abbr>.
    -->

<!ELEMENT acronym (%inline;)* >

<!--Attuse: acronym

    "title" value may expand that acronym.
    "pronounce" value 'yes' indicates that the
    acronym is pronounceable as a word (for example, NATO);
    'no' that the acronym is best presented as a sequence
    of letters (for examples, "XML" or  "US").
    -->

<!ATTLIST acronym
  %attrs;
  pronounce (yes | no) #IMPLIED
  >

<!--Use: sub indicates a subscript character (printed below a
    character's normal baseline). Can be used recursively and/or
    intermixed with <sup>.
    -->

<!ELEMENT sub (%inline;)* >

<!ATTLIST sub
  %attrs;
  >

<!--Use: sup marks a superscript character (printed above a
    character's normal baseline). Can be used recursively and/or
    intermixed with <sub>.
    -->

<!ELEMENT sup (%inline;)* >

<!ATTLIST sup
  %attrs;
  >

<!--Use: span is a generic container for use in inline settings
    when no specific tag exists for a given situation. The class
    attribute may describe the nature of the text it marks (e.g.,
    a typographical error). May be used to mark a class of items
    to which styles are to be applied. Compare with <div>, which
    is used in a block settings.
    -->

<!ELEMENT span (%inline;)* >

<!ATTLIST span
  %attrs;
  >

<!--Use: bdo is used in special cases where the automatic actions
    of the bi-directional algorithm would result in incorrect display.
    -->

<!ELEMENT bdo (%inline;)* >

<!--Attuse: bdo

    "lang" indicates the language of the content.

    "dir" indicates the writing direction: 'ltr' is
    left-to-right, 'rtl' is right-to-left.
    -->

<!ATTLIST bdo
  %coreattrs;
  lang %LanguageCode; #IMPLIED
  dir (ltr | rtl) #REQUIRED
  >

<!--=================== dtbook Inline Sentence and Word ===================-->

<!--Use: sent marks a sentence.
    -->

<!ELEMENT sent (%inlines;)* >

<!ATTLIST sent
  %attrs;
  >

<!--Use: w marks a word.
    -->

<!ELEMENT w (%inlinew;)* >

<!ATTLIST w
  %attrs;
  >

<!--======== Inline Page Number, Footnote and Annotation Reference ========-->

<!--Use: pagenum contains one page number as it appears from the print
    document, usually inserted at the point within the file immediately
    preceding the first item of content on a new page.
    -->

<!ELEMENT pagenum (#PCDATA) >

<!--Attuse: pagenum

    "page" allows three kinds of page numbering
    schemes to be identified:
        'normal' Arabic numbering in the body of the book is
            the default,
        'front' pages (from the <frontmatter>, often roman numbering),
        'special' pagination schemes such as letter prefix hyphen Arabic
            number in appendices.
    Each pagenum needs a unique id value, by convention it is derived
    from the actual pagenumber. For multi-page continuous content,
    such as large <img> or <table>, put the sequence of <pagenum> on
    the page where that content starts.
    -->

<!ATTLIST pagenum
  %attrsrqd;
  page (front | normal | special) 'normal'
  >

<!--Use: noteref marks one or more characters that reference a footnote
    or endnote <note>. Contrast with <annoref>. <noteref> and <note>
    are independently skippable.
    -->

<!ELEMENT noteref (#PCDATA) >

<!--Attuse: noteref

    "idref" relates to the note, for example:
    <noteref idref='yyy'> refers to <note id='yyy'>.

    "type" provides advisory content MIME type of
    the target, see [RFC1556].
    -->

<!ATTLIST noteref
  %attrs;
  idref CDATA #REQUIRED
  type %ContentType; #IMPLIED
  >

<!--Use: annoref marks a text segment that references an <annotation>.
    Each <annoref> is usually a word, phrase, or whole line that
    is part of the surrounding text (identified in the original
    print book by bolding, italics, etc.). It should not normally
    be allowed to be turned off in a DTB application.
    -->

<!ELEMENT annoref (#PCDATA) >

<!--Attuse: annoref

    "idref" refers to the target id of an
    <annotation>.

    "type" provides advisory content MIME
    type of the targeted id, see [RFC1556].
    -->

<!ATTLIST annoref
  %attrs;
  idref CDATA #REQUIRED
  type %ContentType; #IMPLIED
  >

<!--============================ Inline Quotes ============================-->

<!--Use: q contains a short, inline quotation. Compare with
    <blockquote>, which marks a longer quotation set off from the
    surrounding text.
    -->

<!ELEMENT q (%inline;)* >

<!--Attuse: q

    "cite" may provide a URI reference.
    -->

<!ATTLIST q
  %attrs;
  cite %URI; #IMPLIED
  >

<!--=============================== Images ================================-->

<!-- Image <img> comes from HTML. An <img> may be grouped
       using <imggroup>, with <caption>, and special
       usage instructions or description with <prodnote>. The <imggroup>
       element may contain one or more <img> and any associated
       <caption> and <prodnote>. Multiple <img> may share a single
       caption, or multiple <caption> may apply if several captions
       refer to a single <img>. Multiple <prodnote> may apply if
       different versions are needed for different media.
    -->

<!ENTITY % Length "CDATA" >
    <!-- measured in pixels, percent (nn%) -->

<!ENTITY % MultiLength "CDATA" >
    <!-- measured in integer pixels "n", percent "nn%" of display width,
         "0*" indicating minimum appropriate width based on column
         content, or "nn*" the relative proportional width (".5*" is
         half the available width after any explicit widths have been
         consumed). The lengths are separated by commas or whitespace. -->

<!ENTITY % Pixels "CDATA" >
    <!-- 0 for no <table> border, positive integer for <table> border width
        in pixels. -->

<!--HB: 2001-12-20 img Use: changed idref to imgref. -->

<!--Use: img marks a visual image. An <img> will always contain an alt and
    generally contain a longdesc, a pointer to a related <prodnote>. The
    <img> may be referenced by a <caption> or <prodnote>, using, for
    example, the form <caption imgref="#yyy">the Caption</caption> for
    the <img id="yyy">.
    -->

<!ELEMENT img EMPTY >

<!--Attuse: img

    "src" specifies by URI the location of the image file.

    "alt" is used to supply a short description of the <img>.

    "longdesc" generally contains a pointer to a related
    <prodnote> that contains a detailed description of the <img>.

    The attributes "height" and "width" provide visual sizing
    information, measured in pixels.
    -->

<!ATTLIST img
  %attrs;
  src %URI; #REQUIRED
  alt %Text; #REQUIRED
  longdesc %URI; #IMPLIED
  height %Length; #IMPLIED
  width %Length; #IMPLIED
  >

<!--Use: imggroup provides a container for one or more <img> and associated
    <caption>(s) and <prodnote>(s). A <prodnote> may contain a description
    of the image. The content model allows:

    1) multiple <img> if they share a caption, with the ids of
    each <img> in the <caption imgref="id1 id2 ...">,

    2) multiple <caption> if several captions refer to a single
    <img id="xxx"> where each caption has the same
    <caption imgref="xxx">,

    3) multiple <prodnote> if different versions are needed for different
    media (e.g., large print, braille, or print).  If several <prodnote>
    refer to a single <img id="xxx">, each prodnote has the same <prodnote
    imgref="xxx">.
    -->

<!ELEMENT imggroup (prodnote | img | caption)+ >

<!ATTLIST imggroup
  %attrs;
  >

<!--=========================== Horizontal Rule ===========================-->

<!--Use: hr is an empty element, minimally <hr />, indicating a horizontal
    rule. It may be used to indicate a break in the text where only
    blank lines, a row of asterisks, a horizontal line, etc. are used
    in the print book.
    -->

<!ELEMENT hr EMPTY >

<!--Attuse: hr

    "title" may be used to suggest the reason for the break.
    -->

<!ATTLIST hr
  %coreattrs;
  >

<!--============================= Paragraphs ==============================-->

<!--Use: p contains a paragraph, which may contain subsidiary <list> or <dl>.
    -->

<!ELEMENT p (%inline; | %list; | dl)* >

<!ATTLIST p
  %attrs;
  >

<!--================== Doctitle, Docauthor, and Headings  ==================-->

<!--Use: doctitle marks the title of the book within <frontmatter>.
    By convention <doctitle> should appear only once. Contrast with
    <title>, which occurs as metadata in <head> and whose content
    is generally the same.
    -->

<!ELEMENT doctitle (%inline;)* >

<!ATTLIST doctitle
  %attrs;
  >

<!--Use: docauthor marks each author or editor of this work. Compare with
    <author>, used to mark the author of another work, within <blockquote>
    or <cite>.
    -->

<!ELEMENT docauthor (%inline;)* >

<!ATTLIST docauthor
  %attrs;
  >

<!--Use: levelhd contains the text of a heading within <level>.
    Corresponds to <h1> through <h6> used in <level1> through <level6>.
    -->

<!--Attuse: levelhd

    "depth" is a positive integer, corresponding to the <h1>...<h6>
    levelN, though not limited to just six levels. Any depth value,
    "n", should match that on the enclosing <level depth="n">.
    -->

<!ELEMENT levelhd (%inline;)* >

<!ATTLIST levelhd
  %attrs;
  depth CDATA #IMPLIED
  >

<!--Use: h1 contains the text of the heading for a <level1> structure.
    -->

<!ELEMENT h1 (%inline;)* >

<!ATTLIST h1
  %attrs;
  >

<!--Use: h2 contains the text of the heading for a <level2> structure.
    -->

<!ELEMENT h2 (%inline;)* >

<!ATTLIST h2
  %attrs;
  >

<!--Use: h3 contains the text of the heading for a <level3> structure.
    -->

<!ELEMENT h3 (%inline;)* >

<!ATTLIST h3
  %attrs;
  >

<!--Use: h4 contains the text of the heading for a <level4> structure.
    -->

<!ELEMENT h4 (%inline;)* >
<!ATTLIST h4
  %attrs;
  >

<!--Use: h5 contains the text of the heading for a <level5> structure.
    -->

<!ELEMENT h5 (%inline;)* >

<!ATTLIST h5
  %attrs;
  >

<!--Use: h6 contains the text of the heading for a <level6> structure.
    -->

<!ELEMENT h6 (%inline;)* >

<!ATTLIST h6
  %attrs;
  >

<!--Use: hd marks the text of a heading in a <list> or <sidebar>.
    -->

<!ELEMENT hd (%inline;)* >

<!ATTLIST hd
  %attrs;
  >

<!--========================== Preformatted Text ==========================-->

<!-- HTML or XHTML preformatted text is omitted, as inappropriate for
        narrated material. -->

<!--========================== Block-like Quotes ==========================-->

<!--Use: blockquote indicates a block of quoted content that is set
    off from the surrounding text by paragraph breaks. Compare with
    <q>, which marks short, inline quotations.
    -->

<!ELEMENT blockquote (%block;)* >

<!--Attuse: blockquote

    "cite" permits inclusion of the
    URI from which the <blockquote> came.
    -->

<!ATTLIST blockquote
  %attrs;
  cite %URI; #IMPLIED
  >

<!--================== Definition List, and Other Lists ===================-->

<!--Use: dl contains a definition list, usually consisting of pairs of
    terms <dt> and definitions <dd>. Any definition can contain another
    definition list.
    -->

<!ELEMENT dl (dt | dd | pagenum)+ >

<!ATTLIST dl
 %attrs;
  >

<!--Use: dt marks a term in a definition list <dl> for which a
    definition <dd> follows.
    -->

<!ELEMENT dt (%inline;)* >

<!ATTLIST dt
  %attrs;
  >

<!--Use: dd marks a definition of the preceding term <dt> within a
    definition list <dl>. A definition without a preceding <dt> has
    no semantic interpretation, but is visually presented aligned
    with other <dd>.
    -->

<!ELEMENT dd (%flow;)* >

<!ATTLIST dd
  %attrs;
  >

<!--Use: list contains some form of list, ordered or unordered.
    The list may have intermixed heading <hd> (generally only one,
    possibly with <prodnote>) and an intermixture of list items <li>
    and <pagenum>. If bullets and outline enumerations are part of
    the print content, they are expected to prefix those list items
    in content, rather than be implicitly generated. Note: XHTML
    has explicitly distinguished list element types: ol for ordered,
    and ul for unordered.
    -->

<!ELEMENT list (hd | prodnote | li | pagenum)+ >

<!--Attuse: list

    "type" indicates whether the list items
    <li> are ordered 'ol' or unordered 'ul'.

    "depth" indicates nesting depth of lists within list items <li>
    of ancestor lists, starting at 1.

    "enum" indicates the kind of enumeration:
        '1'=integer,
        'a'=lowercase,
        'U'=uppercase,
        'i'=lowercase Roman, or
         X'=uppercase Roman.

    "bullet" can come from Unicode, using the entity
    reference form '&amp;xdddd;'.
    -->

<!ATTLIST list
  %attrs;
  type (ol | ul) #IMPLIED
  depth CDATA #IMPLIED
  enum (1 | a | U | i | X) #IMPLIED
  bullet CDATA #IMPLIED
  >

<!--Use: li marks each list item in a <list>. <li> content may be
    either inline or block and may include other nested
    lists. Alternatively it may contain a sequence of list item
    components, <lic>, that identify regularly occurring content,
    such as the heading and page number of each entry in a
    table of contents.
    -->

<!ELEMENT li (%flow; | lic)* >

<!ATTLIST li
  %attrs;
  >

<!--Use: lic ("list item component") allows ordered substructure
    within a list item <li>. Used when a list item is made up of
    two or more components, as in a table of contents entry.
    The same number of <lic> should occur in each <li>. If not,
    correspondence of <lic> in different <li> is in order of
    occurrence for the current writing direction of the <li>.
    -->

<!ELEMENT lic (%inline;)* >

<!--Attuse: lic

    class attribute may be used to identify the particular
    component of a list item <li>. For example, in a table of contents
    class values might include "section", and "pagenumber".
    -->

<!ATTLIST lic
  %attrs;
  >

<!--=============================== Tables ================================-->

<!-- The XHTML <table> model is used, including the presentational
        attributes that have little meaning in Digital Talking Books,
        but may be useful for concurrent display in different media.
        That model is derived from IETF HTML table standard, see [RFC1942].

        Note: The XHTML <table> model has been enhanced from HTML to allow
        a simple <table> of one or more rows <tr>.
    -->

<!ENTITY % Scope
    "(row | col | rowgroup | colgroup)" >
    <!-- Scope specifies a set of data cells for which the <th> provides
        header information. -->

<!ENTITY % TFrame
    "(void | above | below | hsides | lhs | rhs | vsides | box | border)" >
    <!-- TFrame identifies the sides that are visually framed. -->

<!--HB: 2001-12-20 % Trules added default meaning from xhtml strict dtd.-->
<!ENTITY % TRules
    "(none | groups | rows | cols | all)" >
    <!-- %TRules identifies where visual rulings appear.
        If no Trules is present then assume:
        'none' if border is absent or border='0' otherwise 'all'. -->

<!--HB: 2001-12-20 % cellhalign clarified interitance. -->

<!ENTITY % cellhalign
    "align      (left|center|right|justify|char) #IMPLIED
     char       %Character;    #IMPLIED
     charoff    %Length;       #IMPLIED" >
    <!-- % cellhalign
        cellhalign sets horizontal alignment of content in
        a table cell.

        char indicates a character expected in each table
        cell of a column that text should align on. The default is
        the decimal point for the current language.

        charoff sets the alignment offset of the first character
        to align on, as specified with char.

        Inheritance order for horizontal alignment is <th>|<td>,
        <tr>, <thead>|<tfoot>|<tbody>, <col>, <colgroup>, default. The
        default value is from the user agent, and may be affected
        by user preference. The recommended default alignment for
        <th> is center, and for <td> is left.
        -->

<!--HB: 2001-12-20 % cellvalign clarified interitance. -->

<!ENTITY % cellvalign
    "valign     (top|middle|bottom|baseline) #IMPLIED" >
    <!-- % cellvalign
        valign sets vertical alignment of content in a table cell.

        Inheritance order for vertical alignment is <th>|<td>, <col>,
        <colgroup>, <tr>, <thead>|<tfoot>|<tbody>, default. The
        default value is from the user agent, and may be affected
        by user preference. The recommended default is middle.
       -->

<!--Use: table contains cells of tabular data arranged in rows and
    columns. A <table> may have a <caption>. It may have descriptions of
    the columns in <col>s or groupings of several <col> in <colgroup>.
    A simple <table> may be made up of just rows <tr>. A long table
    crossing several pages of the print book should have separate
    <pagenum> values for each of the pages containing that <table>
    indicated on the page where it starts. Note the logical order of
    optional <thead>, optional <tfoot>, then one or more of either
    <tbody> or just rows <tr>. This order accommodates simple or large,
    complex tables. The <thead> and <tfoot> information usually helps
    identify content of the <tbody> rows, For a multiple-page print
    <table> the <thead> and <tfoot> are repeated on each page, but
    not redundantly tagged.
    -->

<!--HB: 2001-12-20 table updated model to xhtml strict dtd, adding
        simple table of just rows (tr). Added attribute inheritance
        information from RFC1942. -->

<!ELEMENT table (caption?, (col* | colgroup*), thead?, tfoot?, (tbody+| tr+)) >

<!--Attuse: table

    "summary" value provides a textual summary.

    The attributes: "width", "border", "frame", "rules", "cellspacing",
    and "cellpadding" provide visual presentation guidance. See their
    explanation in the comment following those parameter entity
    declarations.
    -->

<!ATTLIST table
  %attrs;
  summary %Text; #IMPLIED
  width %Length; #IMPLIED
  border %Pixels; #IMPLIED
  frame %TFrame; #IMPLIED
  rules %TRules; #IMPLIED
  cellspacing %Length; #IMPLIED
  cellpadding %Length; #IMPLIED
  >
<!--Use: caption describes a <table> or <img>. If used with <table> it
    must follow immediately after the <table> start tag. If used
    with <img> or <imggroup> it is not so constrained.
    -->

<!ELEMENT caption (%inline;)* >

<!--HB: 2001-12-20 caption added imgref extension for dtbook comment. -->

<!--Attuse: caption

    "imgref" value (or space-separated
    id values) identifies the id values of the <img>(s) to which the
    caption applies. Any internal id reference is preceded by '#id'.
    Note: imgref is an extension for dtbook.
    -->

<!ATTLIST caption
  %attrs;
  imgref IDREFS #IMPLIED
  >

<!--HB: 2001-12-20 thead updated Use to xhtml strict dtd. -->

<!--Use: thead marks header information in a <table>, consisting of
    one or more rows <tr> of <th> cells. Use <thead> to duplicate
    headers when breaking table across page boundaries, or for static
    headers when <tbody> sections are rendered in scrolling panel.
    -->

<!ELEMENT thead (tr)+ >

<!ATTLIST thead
  %attrs;
  %cellhalign;
  %cellvalign;
  >

<!--HB: 2001-12-20 tfoot updated Use to xhtml strict dtd. -->

<!--Use: tfoot marks footer information in a <table>, consisting of
    one or more rows <tr>, usually of <th> cells. Use <tfoot> to
    duplicate footers when breaking table across page boundaries,
    or for static footers when <tbody> sections are rendered in
    scrolling panel.
    -->

<!ELEMENT tfoot (tr)+ >

<!ATTLIST tfoot
  %attrs;
  %cellhalign;
  %cellvalign;
  >

<!--HB: 2001-12-20 tbody updated Use to xhtml strict dtd. -->

<!--Use: tbody marks a group of rows in the main body of a <table>. If
    the <table> is divided into several sections, each consisting of a
    number of rows, each section would be separately tagged with <tbody>.
    The same <thead> and <tfoot> apply to every <tbody> section.
    Use multiple <tbody> sections when rules are needed between groups
    of table rows.
    -->

<!ELEMENT tbody (tr)+ >

<!ATTLIST tbody
  %attrs;
  %cellhalign;
  %cellvalign;
  >

<!--Use: colgroup groups adjacent columns <col> that are semantically
    related.
    -->

<!ELEMENT colgroup (col)* >

<!--HB: 2001-12-20 colgroup updated Attuse to xhtml strict dtd. -->

<!--Attuse: colgroup

    "span" causes the attributes of one
    col element to apply to more than one column, extending in the
    writing direction for the language. Span is ignored if
    any <col> are present.

    "width" specifies the width of the columns, e.g.

        width='64'        width in screen pixels
        width='0.5*'      relative width of 0.5

    "width" may contain a space- or comma-separated list of widths
    for each <col>, or percentages if values end in '%', or relative
    'nn*' to indicate a fractional portion of the remaining
    widths after more explicit forms have been specified for other
    columns in the colgroup (presumably the sum encompasses all
    the columns). '0*' indicates minimal acceptable width based
    on column content.

    The <col> in a <colgroup> may inherit attribute values
    from it, or the closest enclosing ancestor element:
    <thead>|<tfoot>|<tbody>. If none, then the values are up to the
    user agent, possibly by user preference.
    -->

<!ATTLIST colgroup
  %attrs;
  span NMTOKEN '1'
  width %MultiLength; #IMPLIED
  %cellhalign;
  %cellvalign;
  >

<!--Use: col elements define the alignment properties for cells in
    one or more columns.
    -->

<!ELEMENT col EMPTY >

<!--Attuse: col
    "span" indicates how many columns the <col>
    extends, in the writing direction of the <table>. The
    attribute values apply to <th> and <td> that start in the
    column, even if they extend into the next column(s), by
    span value more than 1, and that next <col> may have different
    attribute values.

    "width" may contain a space- or comma-separated list of widths
    for each <col> of the span, or percentages if values end in '%',
    or relative 'nn*' to indicate a fractional portion of the remaining
    widths after more explicit forms have been specified for other
    columns in the span (presumably the sum encompasses all
    the columns of this span, and of other <colgroup>s). '0*' indicates
    minimal acceptable width based on individual <col> content.

    <col> may inherit attribute values from the most immediate
    enclosing ancestor element: <colgroup>, <thead>|<tbody>|<tfoot>.
    If none, it is up to the user agent, possibly by user preference.
    -->

<!ATTLIST col
  %attrs;
  span NMTOKEN '1'
  width %MultiLength; #IMPLIED
  %cellhalign;
  %cellvalign;
  >

<!--Use: tr marks one row of a <table> containing <th> or <td> cells.
    -->

<!ELEMENT tr (th | td)+ >

<!--Attuse: tr

    %cellvalign; values provide default vertical alignment
    values for <th> and <td> in the row, overriding any from
        <thead>|<tbody>|<tfoot>, <col>, <colgroup>
    If none, it is up to the user agent, possibly by user preference.

    %cellhalign; values provide default horizontal alignment from
        <thead>|<tbody>|<tfoot>
    If none, it is up to the user agent, possibly by user preference.

    -->

<!ATTLIST tr
  %attrs;
  %cellhalign;
  %cellvalign;
  >

<!--Use: th indicates a table cell containing header information.
    -->

<!ELEMENT th (%flownopagenum;)* >

<!--Attuse: th

    The uses of attributes other than %attrs; %cellvalign; and %cellhalign;
    are shown below. See [HTML401STRICT] for details and examples.

    "abbr" provides an abbreviated name for a <th> cell that can be used
    when referring to that <th> cell. Its default value is the cell content.

    "axis" is used to place cells into conceptual categories in order to
    provide improved access to information.

    "headers" provides the id value(s), used with <td> cells, to reference
    one or more cells with <th id="xxx"> that contain headings that
    collectively describe or qualify the content of the cell, for example
    <td headers="id1 id2">.

    "scope" identifies one of
        (row | rowgroup | column | colgroup)
    to which the header information applies.

    "rowspan" indicates the total number of rows that the cell extends, by
    default 1. All spanned cells share these attributes.

    "colspan" indicates the total number of columns the cell extends,
    by default 1, in the writing direction of the table. All spanned
    cells share these attributes.
    -->

<!ATTLIST th
  %attrs;
  abbr %Text; #IMPLIED
  axis CDATA #IMPLIED
  headers IDREFS #IMPLIED
  scope %Scope; #IMPLIED
  rowspan NMTOKEN '1'
  colspan NMTOKEN '1'
  %cellhalign;
  %cellvalign;
  >

<!--Use: td indicates a table cell containing data.
    -->

<!ELEMENT td (%flownopagenum;)* >

<!--Attuse: td

    The uses of attributes other than %attrs; %cellhalign; and %cellvalign;
    are shown below.  See [HTML401STRICT] for details and examples.

    "abbr" provides an abbreviated name for a <th> cell that can be used
    when referring to that <th> cell. Its default value is the cell content.

    "axis" is used to place cells into conceptual categories in order to
    provide improved access to information.

    "headers" provides the id value(s), used with <td> cells, to reference
    one or more cells with <th id="xxx"> that contain headings that
    collectively describe or qualify the content of the cell, for example
    <td headers="id1 id2">.

    "scope" identifies one of
        (row | rowgroup | column | colgroup)
    to which the header information applies.

    "rowspan" indicates the total number of rows that the cell extends, by
    default 1. All spanned cells share these attributes.

    "colspan" indicates the total number of columns the cell extends,
    by default 1, in the writing direction of the table. All spanned
    cells share these attributes.
    -->

<!ATTLIST td
  %attrs;
  abbr %Text; #IMPLIED
  axis CDATA #IMPLIED
  headers IDREFS #IMPLIED
  scope %Scope; #IMPLIED
  rowspan NMTOKEN '1'
  colspan NMTOKEN '1'
  %cellhalign;
  %cellvalign;
  >
